if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("minfi")]
https://cran.rstudio.com/bin/windows/Rtools/
library(SRAdb)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SRAdb")
library(SRAdb)
getSRAdbFile
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GEOmetadb")
library(GEOmetadb)
getSQLiteFile
getSRAdbFile()
BiocManager::valid()
??H5Dopen
library(minfi)
length(grmf)
?GenomicRatioSet
library(minfiData)
data("MsetEx")
ms = MsetEx
dim(ms
)
gs = mapToGenome(ms)
dim(gs)
class(gs)
?GenomicRatioSet
grs = GenomicRatioSet(gr = granges(gs), Beta = getBeta(gs))
dim(grs)
granges(gs)
annotation(grs)
grs = GenomicRatioSet(Beta = getBeta(gs))
dim(getM(grs))
dim(grs)
class(getBeta(gs))
class(granges(gs))
length(granges(gs))
getBeta(gs)[c(1:2), c(1:2)]
dim(gs)
((37000/50)*31)/60
((37000/50)*4)/60
((37000/200)*36)/60
((37000/60)*5.5)/60
((37000/50)*4)/60
((37000/100)*11)/60
((37000/50)*1.6)/60
((37000/25)*1.6)/60
(((37000)*3.6)/60)/60
(((37000/5)*17)/60)/60
(((37000/15)*51)/60)/60
(((37000/30)*2))/60
dati = c("GSM1", 2, 3, 10, "GSM2", 2, 3, 5)
matrix(dati, nrow = length(which(grepl(".*GSM.*", dati))))
matrix(dati, nrow = length(which(grepl(".*GSM.*", dati))), byrow = T)
matrix(dati[!grepl(".*GSM.*", dati)], nrow = length(which(grepl(".*GSM.*", dati))), byrow = T)
(((37000/30)*1.5))/60
((36250*2)/21650)*33790768776
cv <- c()
for(1 in 1:1000){cv <- c(cv, sample(c("a", "b", "b"),1))}
cv <- c()
for(i in 1:1000){cv <- c(cv, sample(c("a", "b", "b"),1))}
table(cv)
if(is.numeric(doorswitch) & doorswitch >= 0 & doorswitch <= 1){
ssvar <- sample(c(rep("a", doorswitch), rep("b", 100 - doorswitch)), 1)
switchassess <- ifelse(ssvar == "a", "switch", "stay")
} else{
if(doorswitch == "always"){
switchassess <- "switch"
} else{
stop("Invalid doorswitch value.")
}
}
require(devtools); install_github("metamaden/montyhall")
require(devtools); install_github("metamaden/montyhall")
require(devtools); install_github("metamaden/montyhall")
require(devtools); install_github("metamaden/montyhall")
require(devtools); install_github("metamaden/montyhall")
require(devtools); install_github("metamaden/montyhall")
require(devtools); install_github("metamaden/montyhall")
setwd("~/ohsu/recount_methylation/hdf5")
library(minfiData)
data(MsetEx)
dim(MsetEx)
?GenomicMethylSet
dim(getMeth(MsetEx))
minfi::GenomicMethylSet(Meth = get(Meth))
minfi::GenomicMethylSet(Meth = getMeth(MsetEx), Unmeth = getUnmeth(MsetEx))
anno = c("IlluminaHumanMethylation450k", "ilmn12.hg19")
names(anno) = c("array", "annotation")
ms <- minfi::GenomicMethylSet(Meth = getMeth(MsetEx),
Unmeth = getUnmeth(MsetEx),
anno = anno)
GenomicMethylSet
assays(MsetEx)
as(GRanges(), "GRanges")
ms <- minfi::GenomicMethylSet(gr = GRanges(),
Meth = getMeth(MsetEx),
Unmeth = getUnmeth(MsetEx),
anno = anno)
data(IlluminaHumanMethylation450kmanifest)
man <- IlluminaHumanMethylation450kmanifest
dim(man)
Manifest
class(man@annotation)
class(man@data)
man@data
man
class(man)
GRanges(man)
granges(MsetEx)
mrset <- mapToGenome(MsetEx)
granges(mrset)
class(granges(mrset))
grcg <- granges(mrset)
ms <- minfi::GenomicMethylSet(gr = grcg,
Meth = getMeth(MsetEx),
Unmeth = getUnmeth(MsetEx),
anno = anno)
dim(ms)
grs <- minfi::GenomicRatioSet(gr = grcg,
Beta = getBeta(MsetEx),
anno = anno)
dim(getBeta(grs))
dim(getM(grs))
anno
anno c(array = "Ill")
anno c("array" = "Ill")
class(anno)
as.character(array = "a")
as.character("array" = "a")
?grangse
?granges
for(i in 1:seq(1:3)){i = i + 1; message(i)}
h5_newtables <- function(dbn = "remethdb2.h5", dsn.nb = "noobbeta",
dsn.meth = "methylated_signal",
dsn.unmeth = "unmethylated_signal",
dsn.red = "redsignal", dsn.grn = "greensignal",
verbose = TRUE, ngsm.block = 50,
ncol.chunk = 5000){
# Generate noobbeta and meth/unmeth signal tables
# get dimensions from red and grn signal data
rs.rn <- rhdf5::h5read(dbn, paste0(dsn.red, ".rownames"))
rs.cn <- rhdf5::h5read(dbn, paste0(dsn.red, ".colnames"))
gs.rn <- rhdf5::h5read(dbn, paste0(dsn.grn, ".rownames"))
gs.cn <- rhdf5::h5read(dbn, paste0(dsn.grn, ".colnames"))
sbv <- getblocks(length(rs.rn), ngsm.chunk)
# get new cg  dimensions
anno.name = "IlluminaHumanMethylation450kanno.ilmn12.hg19"
man = eval(parse(text = paste(anno.name, "Manifest", sep = "::")))
ncg = nrow(man)
# new h5 data params
newdims <- c(length(rs.rn), ncg)
chunkvars <- c(5, ncol.chunk)
# make new tables
rhdf5::h5createDataset(dbn, "unmethylated_signal", dims = newdims,
maxdims = c(H5Sunlimited(), H5Sunlimited()),
storage.mode = "double", level = 5, chunk = chunkvars)
rhdf5::h5createDataset(dbn, "methylated_signal", dims = newdims,
maxdims = c(H5Sunlimited(), H5Sunlimited()),
storage.mode = "double", level = 5, chunk = chunkvars)
rhdf5::h5createDataset(dbn, "noobbeta", dims = newdims,
maxdims = c(H5Sunlimited(), H5Sunlimited()),
storage.mode = "double", level = 5, chunk = chunkvars)
# append new data
t1 <- Sys.time()
for(i in 1:length(sbv)){
b = sbv[[i]]
gsmvi <- gsub("\\..*", "", rs.rn[b])
se.rgi = recountmethylation::getrg(gsmv = gsmvi,
cgv = "all", dbn = dbn,
data.type = "se",
metadata = FALSE,
verbose = FALSE)
# new se and data objects
se.nb <- preprocessNoob(se.rgi)
methb <- t(minfi::getMeth(se.nb))
unmethb <- t(minfi::getUnmeth(se.nb))
nb <- t(minfi::getBeta(se.nb))
# append new data to h5 data
writei <- list(b[1]:b[length(b)], 1:ncg)
rhdf5::h5write(unmethb, file = dbn,
name = dsn.unmeth, index = writei)
rhdf5::h5write(methb, file = dbn,
name = dsn.meth, index = writei)
rhdf5::h5write(nb, file = dbn,
name = dsn.nb, index = writei)
if(verbose){
message("iter: ", i," of ",
length(sbv),", time: ",
Sys.time() - t1)
}
}
if(verbose){message("Completed addition of new tables!")}
return(TRUE)
}
setwd("~/GitHub/rmpipeline")
library(devtools)
document()
devtools::document()
