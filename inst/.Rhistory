make_h5se("remethdb-seh5", "0.0.1", "1123", se = "rg",
dsn.rn = "redsignal.rownames", dsn.cn = "redsignal.colnames")
make_h5se("remethdb-seh5", "0.0.1", "1123", se = "rg",
dbn = "remethdb_1123_0-0-1.h5",
dsn.rn = "redsignal.rownames",
dsn.cn = "redsignal.colnames")
make_h5se("remethdb-seh5", "0.0.1", "1123", se = "rg",
dbn = "remethdb_1123_0-0-1.h5",
dsn.data1 = "redsignal", dsn.data2 = "greensignal",
dsn.rn = "redsignal.rownames",
dsn.cn = "redsignal.colnames")
dbn
dsn.data2
nb <- HDF5Array::HDF5Array(dbn, dsn.data2)
dim(nb)
rownames(nb) <- as.character(rn)
nb <- HDF5Array::HDF5Array(dbn, dsn.data2)
rownames(nb) <- as.character(rn)
nb <- t(nb)
rownames(nb) <- cn
cn
length(cn)
dim(nb)
length(cn)
length(cn)
rownames(nb) <- cn
class(cn)
nb <- HDF5Array::HDF5Array(dbn, dsn.data2)
rownames(nb) <- as.character(rn)
nb <- t(nb)
rownames(nb) <- as.character(cn)
if(!identical(nrow(nb), nrow(ldat[[1]])) |
!identical(ncol(nb), ncol(ldat[[1]]))){
stop("Matrix dsn.data2 not similar dim to dsn.data1!")
}
make_h5se("remethdb-seh5", "0.0.1", "1123", se = "rg",
dbn = "remethdb_1123_0-0-1.h5",
dsn.data1 = "redsignal", dsn.data2 = "greensignal",
dsn.rn = "redsignal.rownames",
dsn.cn = "redsignal.colnames")
make_h5se <- function(newfnstem, version, ts,
se = c("rg", "gr", "gm"),
dbn = "remethdb2.h5", dsn.data1,
dsn.rn = "redsignal.rownames",
dsn.cn = "redsignal.colnames",
dsn.data2 = NULL,
addpheno = FALSE, phenopath = NULL,
verbose = TRUE,
replace.opt = TRUE){
# Sets up SummarizedExperiment creation from h5 file
# Stores SE object to SE H5 file with DelayedArray processing
# make the new filename
newfn <- paste(newfnstem, gsub("\\.", "-", version), ts, sep = "_")
# check the specified se
if(length(se) > 1){stop("Specify a single se set to process per run.")}
# anno for se sets
if(verbose){message("Setting annotation info...")}
anno = c("IlluminaHumanMethylation450k", "ilmn12.hg19")
names(anno) = c("array", "annotation")
# get granges object
if("gr" %in% se | "gm" %in% se){
if(verbose){message("Getting the GRanges object...")}
mset <- get(data(MsetEx, package = "minfiData"))
mrset <- minfi::mapToGenome(mset)
grcg <- GenomicRanges::granges(mrset)
}
# load data table
if(verbose){message("Getting dsn.data1...")}
ldat <- list()
nb <- HDF5Array::HDF5Array(dbn, dsn.data1)
rn <- rhdf5::h5read(dbn, dsn.rn)
cn <- rhdf5::h5read(dbn, dsn.cn)
rownames(nb) <- as.character(rn)
nb <- t(nb)
ldat[[dsn.data1]] <- nb
# sanity checks and parse data2
if(!is.null(dsn.data2)){
if(verbose){message("Getting dsn.data2...")}
nb <- HDF5Array::HDF5Array(dbn, dsn.data2)
rownames(nb) <- as.character(rn)
nb <- t(nb)
rownames(nb) <- as.character(cn)
if(!identical(nrow(nb), nrow(ldat[[1]])) |
!identical(ncol(nb), ncol(ldat[[1]]))){
stop("Matrix dsn.data2 not similar dim to dsn.data1!")
}
ldat[[dsn.data2]] <- nb
} else if ("rg" %in% se | "gm" %in% se){
stop("Must provide dsn.data2 for se as rg or gm!")
}
# get probe ids or addresses
# note: FIX THIS SECTION, shouldn't apply to RGChannel set objects
if(verbose){message("Getting probe ids/addresses...")}
if("gr" %in% se | "gm" %in% se){
man.package <- "IlluminaHumanMethylation450kanno.ilmn12.hg19"
man <- get(data(Manifest, package = man.package))
cgrn <- rownames(man)
ldat <- lapply(ldat, function(x){
rownames(x) <- cgrn
return(x)
})
}
# make the new H5-SE set(s)
if(verbose){message("Making the new se object...")}
if("rg" %in% se){
if(verbose){message("Making RGChannelSet...")}
gri <- minfi::RGChannelSet(Red = ldat[[1]],
Green = ldat[[2]],
anno = anno)
metadata(gri) <- semd
} else if ("gr" %in% se){
if(verbose){message("Making GenomicRatioSet...")}
gri <- minfi::GenomicRatioSet(gr = grcg,
Beta = ldat[[1]],
anno = anno)
metadata(gri) <- semd
} else{
if(verbose){message("Making GenomicMethylSet...")}
gri <- minfi::GenomicMethylSet(gr = grcg,
Meth = ldat[[1]],
Unmeth = ldat[[2]],
anno = anno)
metadata(gri) <- semd
}
# append pheno
if(addpheno & is.null(phenopath)){
message("Couldn't add phenotype data! Specify phenopath.")
} else{
if(verbose){message("Adding phenotype data...")}
gri.pheno <- se_addpheno(mdp = get(load("mdpost_all-gsm-md.rda")), se = gri)
}
# start the run and save the new H5-SE set
t1 <- Sys.time()
if(verbose){message("Running process and saving H5-SE object...")}
HDF5Array::saveHDF5SummarizedExperiment(gri.pheno,
dir = "rmseh5_grnoob",
replace = replace.opt)
if(verbose){message("Save complete, time elapsed:", Sys.time() - t1)}
return(NULL)
}
make_h5se("remethdb-seh5", "0.0.1", "1123", se = "rg",
dbn = "remethdb_1123_0-0-1.h5",
dsn.data1 = "redsignal", dsn.data2 = "greensignal",
dsn.rn = "redsignal.rownames",
dsn.cn = "redsignal.colnames")
make_h5se <- function(newfnstem, version, ts,
se = c("rg", "gr", "gm"),
dbn = "remethdb2.h5", dsn.data1,
dsn.rn = "redsignal.rownames",
dsn.cn = "redsignal.colnames",
semd = list("title" = "Recount Methylation H5-SE Object",
"version" = version,
"timestamp" = ts),
dsn.data2 = NULL,
addpheno = FALSE, phenopath = NULL,
verbose = TRUE,
replace.opt = TRUE){
# Sets up SummarizedExperiment creation from h5 file
# Stores SE object to SE H5 file with DelayedArray processing
# make the new filename
newfn <- paste(newfnstem, gsub("\\.", "-", version), ts, sep = "_")
# check the specified se
if(length(se) > 1){stop("Specify a single se set to process per run.")}
# anno for se sets
if(verbose){message("Setting annotation info...")}
anno = c("IlluminaHumanMethylation450k", "ilmn12.hg19")
names(anno) = c("array", "annotation")
# get granges object
if("gr" %in% se | "gm" %in% se){
if(verbose){message("Getting the GRanges object...")}
mset <- get(data(MsetEx, package = "minfiData"))
mrset <- minfi::mapToGenome(mset)
grcg <- GenomicRanges::granges(mrset)
}
# load data table
if(verbose){message("Getting dsn.data1...")}
ldat <- list()
nb <- HDF5Array::HDF5Array(dbn, dsn.data1)
rn <- rhdf5::h5read(dbn, dsn.rn)
cn <- rhdf5::h5read(dbn, dsn.cn)
rownames(nb) <- as.character(rn)
nb <- t(nb)
ldat[[dsn.data1]] <- nb
# sanity checks and parse data2
if(!is.null(dsn.data2)){
if(verbose){message("Getting dsn.data2...")}
nb <- HDF5Array::HDF5Array(dbn, dsn.data2)
rownames(nb) <- as.character(rn)
nb <- t(nb)
rownames(nb) <- as.character(cn)
if(!identical(nrow(nb), nrow(ldat[[1]])) |
!identical(ncol(nb), ncol(ldat[[1]]))){
stop("Matrix dsn.data2 not similar dim to dsn.data1!")
}
ldat[[dsn.data2]] <- nb
} else if ("rg" %in% se | "gm" %in% se){
stop("Must provide dsn.data2 for se as rg or gm!")
}
# get probe ids or addresses
# note: FIX THIS SECTION, shouldn't apply to RGChannel set objects
if(verbose){message("Getting probe ids/addresses...")}
if("gr" %in% se | "gm" %in% se){
man.package <- "IlluminaHumanMethylation450kanno.ilmn12.hg19"
man <- get(data(Manifest, package = man.package))
cgrn <- rownames(man)
ldat <- lapply(ldat, function(x){
rownames(x) <- cgrn
return(x)
})
}
# make the new H5-SE set(s)
if(verbose){message("Making the new se object...")}
if("rg" %in% se){
if(verbose){message("Making RGChannelSet...")}
gri <- minfi::RGChannelSet(Red = ldat[[1]],
Green = ldat[[2]],
anno = anno)
metadata(gri) <- semd
} else if ("gr" %in% se){
if(verbose){message("Making GenomicRatioSet...")}
gri <- minfi::GenomicRatioSet(gr = grcg,
Beta = ldat[[1]],
anno = anno)
metadata(gri) <- semd
} else{
if(verbose){message("Making GenomicMethylSet...")}
gri <- minfi::GenomicMethylSet(gr = grcg,
Meth = ldat[[1]],
Unmeth = ldat[[2]],
anno = anno)
metadata(gri) <- semd
}
# append pheno
if(addpheno & is.null(phenopath)){
message("Couldn't add phenotype data! Specify phenopath.")
} else{
if(verbose){message("Adding phenotype data...")}
gri.pheno <- se_addpheno(mdp = get(load("mdpost_all-gsm-md.rda")), se = gri)
}
# start the run and save the new H5-SE set
t1 <- Sys.time()
if(verbose){message("Running process and saving H5-SE object...")}
HDF5Array::saveHDF5SummarizedExperiment(gri.pheno,
dir = "rmseh5_grnoob",
replace = replace.opt)
if(verbose){message("Save complete, time elapsed:", Sys.time() - t1)}
return(NULL)
}
make_h5se("remethdb-seh5", "0.0.1", "1123", se = "rg",
dbn = "remethdb_1123_0-0-1.h5",
dsn.data1 = "redsignal", dsn.data2 = "greensignal",
dsn.rn = "redsignal.rownames",
dsn.cn = "redsignal.colnames")
se_addpheno <- function(phenopath, se, verbose = TRUE){
if(verbose){message("Loading pheno data from path...")}
mdp <- get(load(phenopath))
# Adds pheno data to a SummarizedExperiment objects
mdp <- mdp[mdp$basename %in% colnames(se),]
bnv <- colnames(se)
gsmv <- gsub("\\..*", "", bnv)
gsmfilt <- !gsmv %in% mdp$gsm
gsm.ov <- gsmv[gsmfilt]
bnv.ov <- bnv[gsmfilt]
# add na values
nacol <- rep("NA", length(gsm.ov))
mdp.ov <- matrix(c(gsm.ov,
rep(nacol, 6),
bnv.ov,
rep(nacol, 11)),
nrow = length(gsm.ov))
colnames(mdp.ov) <- colnames(mdp)
mdp <- rbind(mdp, mdp.ov)
mdp <- mdp[order(match(mdp$gsm, gsmv)),]
identical(mdp$gsm, gsmv)
# add valid basenames
mdp$basename <- colnames(se)
rownames(mdp) <- colnames(se)
identical(rownames(mdp), colnames(se))
# append pheno to se object
minfi::pData(se) <- DataFrame(mdp)
return(se)
}
make_h5se <- function(newfnstem, version, ts,
se = c("rg", "gr", "gm"),
dbn = "remethdb2.h5", dsn.data1,
dsn.rn = "redsignal.rownames",
dsn.cn = "redsignal.colnames",
semd = list("title" = "Recount Methylation H5-SE Object",
"version" = version,
"timestamp" = ts),
dsn.data2 = NULL,
addpheno = FALSE, phenopath = NULL,
verbose = TRUE,
replace.opt = TRUE){
# Sets up SummarizedExperiment creation from h5 file
# Stores SE object to SE H5 file with DelayedArray processing
# make the new filename
newfn <- paste(newfnstem, gsub("\\.", "-", version), ts, sep = "_")
# check the specified se
if(length(se) > 1){stop("Specify a single se set to process per run.")}
# anno for se sets
if(verbose){message("Setting annotation info...")}
anno = c("IlluminaHumanMethylation450k", "ilmn12.hg19")
names(anno) = c("array", "annotation")
# get granges object
if("gr" %in% se | "gm" %in% se){
if(verbose){message("Getting the GRanges object...")}
mset <- get(data(MsetEx, package = "minfiData"))
mrset <- minfi::mapToGenome(mset)
grcg <- GenomicRanges::granges(mrset)
}
# load data table
if(verbose){message("Getting dsn.data1...")}
ldat <- list()
nb <- HDF5Array::HDF5Array(dbn, dsn.data1)
rn <- rhdf5::h5read(dbn, dsn.rn)
cn <- rhdf5::h5read(dbn, dsn.cn)
rownames(nb) <- as.character(rn)
nb <- t(nb)
ldat[[dsn.data1]] <- nb
# sanity checks and parse data2
if(!is.null(dsn.data2)){
if(verbose){message("Getting dsn.data2...")}
nb <- HDF5Array::HDF5Array(dbn, dsn.data2)
rownames(nb) <- as.character(rn)
nb <- t(nb)
rownames(nb) <- as.character(cn)
if(!identical(nrow(nb), nrow(ldat[[1]])) |
!identical(ncol(nb), ncol(ldat[[1]]))){
stop("Matrix dsn.data2 not similar dim to dsn.data1!")
}
ldat[[dsn.data2]] <- nb
} else if ("rg" %in% se | "gm" %in% se){
stop("Must provide dsn.data2 for se as rg or gm!")
}
# get probe ids or addresses
# note: FIX THIS SECTION, shouldn't apply to RGChannel set objects
if(verbose){message("Getting probe ids/addresses...")}
if("gr" %in% se | "gm" %in% se){
man.package <- "IlluminaHumanMethylation450kanno.ilmn12.hg19"
man <- get(data(Manifest, package = man.package))
cgrn <- rownames(man)
ldat <- lapply(ldat, function(x){
rownames(x) <- cgrn
return(x)
})
}
# make the new H5-SE set(s)
if(verbose){message("Making the new se object...")}
if("rg" %in% se){
if(verbose){message("Making RGChannelSet...")}
gri <- minfi::RGChannelSet(Red = ldat[[1]],
Green = ldat[[2]],
anno = anno)
metadata(gri) <- semd
} else if ("gr" %in% se){
if(verbose){message("Making GenomicRatioSet...")}
gri <- minfi::GenomicRatioSet(gr = grcg,
Beta = ldat[[1]],
anno = anno)
metadata(gri) <- semd
} else{
if(verbose){message("Making GenomicMethylSet...")}
gri <- minfi::GenomicMethylSet(gr = grcg,
Meth = ldat[[1]],
Unmeth = ldat[[2]],
anno = anno)
metadata(gri) <- semd
}
# append pheno data
if(addpheno & is.null(phenopath)){
message("Couldn't add pheno data! Specify phenopath. Continuing...")
} else{
if(verbose){message("Adding pheno data...")}
gri <- se_addpheno(mdp = get(load("mdpost_all-gsm-md.rda")), se = gri)
}
# start the run and save the new H5-SE set
t1 <- Sys.time()
if(verbose){message("Starting process to make new file ", newfn, "...")}
HDF5Array::saveHDF5SummarizedExperiment(gri,
dir = newfn,
replace = replace.opt)
if(verbose){message("Save complete, time elapsed:", Sys.time() - t1)}
return(NULL)
}
make_h5se("remethdb-seh5", "0.0.1", "1123", se = "rg",
dbn = "remethdb_1123_0-0-1.h5",
dsn.data1 = "redsignal", dsn.data2 = "greensignal",
dsn.rn = "redsignal.rownames",
dsn.cn = "redsignal.colnames")
make_h5se <- function(newfnstem, version, ts,
se = c("rg", "gr", "gm"),
dbn = "remethdb2.h5", dsn.data1,
dsn.rn = "redsignal.rownames",
dsn.cn = "redsignal.colnames",
semd = list("title" = "Recount Methylation H5-SE Object",
"version" = version,
"timestamp" = ts),
dsn.data2 = NULL,
addpheno = FALSE, phenopath = NULL,
verbose = TRUE,
replace.opt = TRUE){
# Sets up SummarizedExperiment creation from h5 file
# Stores SE object to SE H5 file with DelayedArray processing
# make the new filename
newfn <- paste(newfnstem, gsub("\\.", "-", version), ts, sep = "_")
# check the specified se
if(length(se) > 1){stop("Specify a single se set to process per run.")}
# anno for se sets
if(verbose){message("Setting annotation info...")}
anno = c("IlluminaHumanMethylation450k", "ilmn12.hg19")
names(anno) = c("array", "annotation")
# get granges object
if("gr" %in% se | "gm" %in% se){
if(verbose){message("Getting the GRanges object...")}
mset <- get(data(MsetEx, package = "minfiData"))
mrset <- minfi::mapToGenome(mset)
grcg <- GenomicRanges::granges(mrset)
}
# load data table
if(verbose){message("Getting dsn.data1...")}
ldat <- list()
nb <- HDF5Array::HDF5Array(dbn, dsn.data1)
rn <- rhdf5::h5read(dbn, dsn.rn)
cn <- rhdf5::h5read(dbn, dsn.cn)
rownames(nb) <- as.character(rn)
nb <- t(nb)
ldat[[dsn.data1]] <- nb
# sanity checks and parse data2
if(!is.null(dsn.data2)){
if(verbose){message("Getting dsn.data2...")}
nb <- HDF5Array::HDF5Array(dbn, dsn.data2)
rownames(nb) <- as.character(rn)
nb <- t(nb)
rownames(nb) <- as.character(cn)
if(!identical(nrow(nb), nrow(ldat[[1]])) |
!identical(ncol(nb), ncol(ldat[[1]]))){
stop("Matrix dsn.data2 not similar dim to dsn.data1!")
}
ldat[[dsn.data2]] <- nb
} else if ("rg" %in% se | "gm" %in% se){
stop("Must provide dsn.data2 for se as rg or gm!")
}
# get probe ids or addresses
# note: FIX THIS SECTION, shouldn't apply to RGChannel set objects
if(verbose){message("Getting probe ids/addresses...")}
if("gr" %in% se | "gm" %in% se){
man.package <- "IlluminaHumanMethylation450kanno.ilmn12.hg19"
man <- get(data(Manifest, package = man.package))
cgrn <- rownames(man)
ldat <- lapply(ldat, function(x){
rownames(x) <- cgrn
return(x)
})
}
# make the new H5-SE set(s)
if(verbose){message("Making the new se object...")}
if("rg" %in% se){
if(verbose){message("Making RGChannelSet...")}
gri <- minfi::RGChannelSet(Red = ldat[[1]],
Green = ldat[[2]],
anno = anno)
metadata(gri) <- semd
} else if ("gr" %in% se){
if(verbose){message("Making GenomicRatioSet...")}
gri <- minfi::GenomicRatioSet(gr = grcg,
Beta = ldat[[1]],
anno = anno)
metadata(gri) <- semd
} else{
if(verbose){message("Making GenomicMethylSet...")}
gri <- minfi::GenomicMethylSet(gr = grcg,
Meth = ldat[[1]],
Unmeth = ldat[[2]],
anno = anno)
metadata(gri) <- semd
}
# append pheno data
if(addpheno){
if(is.null(phenopath)){
message("Couldn't add pheno data! Specify phenopath. Continuing...")
} else{
if(verbose){message("Adding pheno data...")}
gri <- se_addpheno(mdp = get(load("mdpost_all-gsm-md.rda")), se = gri)
}
}
# start the run and save the new H5-SE set
t1 <- Sys.time()
if(verbose){message("Starting process to make new file ", newfn, "...")}
HDF5Array::saveHDF5SummarizedExperiment(gri,
dir = newfn,
replace = replace.opt)
if(verbose){message("Save complete, time elapsed:", Sys.time() - t1)}
return(NULL)
}
make_h5se("remethdb-seh5", "0.0.1", "1123", se = "rg",
dbn = "remethdb_1123_0-0-1.h5",
dsn.data1 = "redsignal", dsn.data2 = "greensignal",
dsn.rn = "redsignal.rownames",
dsn.cn = "redsignal.colnames")
setwd("~/GitHub/rmpipeline/inst")
gmd <- function(title, version, sname = "get_timestamp.py"){
mdl <- list(title = title, version = version)
# get timestamp from package python script
command <- paste("python", sname, "to", sep = " ")
mdl[["timestamp"]] <- system(command, intern = T)
return(mdl)
}
gmd("title", "v")
devtools::install_github("metamaden/rmpipeline")
vers <- "00.00.01"
rmd <- rmpipeline::get_metadata("newrun", vers)
